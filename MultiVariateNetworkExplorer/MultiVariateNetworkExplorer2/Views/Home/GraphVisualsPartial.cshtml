<div class="column-content controls" id="visuals">
    @* <div class="navigation">
        <div class="tab-nav">
            <a class="tab-link tab-active" href="#" onclick="openTab(event, 'visuals-settings', 'visuals', '.column-content')">Settings</a>
        </div>
        <div class="tab-nav">
            <a class="tab-link" href="#" onclick="openTab(event, 'visuals-profiles', 'visuals', '.column-content')">Profiles</a>
        </div>
    </div> *@
    <div id="visuals-settings">
        @* <select class="attribute-select attribute-select-border" id="colouring-method-select" onchange="changeColourSettingType(this)">
            <option value="monochrome-colour-setting">Single Colour</option>
            <option value="numerical-colour-setting">Numerical Attribute</option>
            <option value="categorical-colour-setting">Categorical Attribute</option>
        </select> *@

        <div class="force" id="monochrome-colour-setting">
            <p><label>Single Node Colour</label>Modify colour of all nodes</p>
            <div class="colour-row-single">
                <label for="network-colour-input" title="Node colour">Node colour</label>
                <input type="color" id="network-colour-input" value="#FFFFFF">
            </div>
            <button class="run-btn" onclick="changeNetworkNodeColour('network-colour-input')">Run</button>
        </div>

        <div class="force" id="label-settings">
            <p><label> Node Label</label>Set a node label based on chosen attribute</p>
            <label class="attribute-selection-label" for="node-label-select">
                Choose Attribute:
                <select id="node-label-select" class="attribute-select attribute-select-border" name="node-label-select" onchange="setNodeLabel(this)">
                    <option value="">--None--</option>
                    <option value="id" selected>id</option>
                    <optgroup label="Attributes">
                        @foreach (var key in Model.GraphModel.Mvn.VectorData.CatAttrValues.Keys)
                        {
                            <option value="@key">@key</option>
                        }
                        @foreach (var key in Model.GraphModel.Mvn.VectorData.NumAtrrExtremes.Keys)
                        {
                            <option value="@key">@key</option>
                        }
                    </optgroup>
                    <optgroup label="Centralities">
                        <option value="degree">Degree</option>
                        <option value="closeness">Closeness</option>
                    </optgroup>
                </select>
            </label>
            <div class="colour-row-single">
                <label for="label-colour-input" title="Label colour">Label colour</label>
                <input type="color" id="label-colour-input" value="#FFFFFF">
            </div>
        </div>

        <div class="force" id="numerical-colour-setting">
            <p><label>Attribute Node Colouring</label>Modify colour of nodes based on its attribute value</p>
            <label class="attribute-selection-label" for="attribute-node-colouring">
                Choose Attribute:
                <select id="attribute-node-colouring" class="attribute-select attribute-select-border"
                        name="attribute-node-colouring" onchange="updateGradientColourList(this.id); 
                        updateGradientLegendAxis(this.id); updateGradientLegend('attribute-node-colouring-preview', 'numerical-colour-list');">
                    <optgroup label="Attributes">
                        @foreach (var key in Model.GraphModel.Mvn.VectorData.NumAtrrExtremes.Keys)
                        {
                            <option value="@key">@key</option>
                        }
                    </optgroup>
                    <optgroup label="Centralities">
                        <option value="degree">Degree</option>
                        <option value="clustering_coefficient">Clustering Coefficient</option>
                    </optgroup>
                </select>
            </label>
            <div id="attribute-node-colouring-preview">
                <svg class="gradient-legend" viewBox="0 0 420 90" >
                    <defs>
                        <linearGradient id="attribute-node-colouring-preview-gradient" x1="0%" x2="100%" y1="0%" y2="0%"></linearGradient>
                    </defs>
                    <text class="gradient-colouring-legend-title" x="10" y="20">
                        Gradient coloring legend
                    </text>
                    <rect class="gradient-colouring-legend" x="10" y="45" height="15" width="400"></rect>
                </svg>
            </div>
            <button onclick="addGradientListColour('attribute-node-colouring-preview', '', '#FFFFFF', 'numerical-colour-list'); updateGradientLegend('attribute-node-colouring-preview', 'numerical-colour-list');">
                Add New Colour
            </button>
            <ol type="1" class="colour-list scrollbar-thin" id="numerical-colour-list">
                
            </ol>
            
            @* <button onclick="saveAttributeGradientColouring('attribute-node-colouring', 'low-value-colour', 'high-value-colour')">Save</button> *@
            <button class="run-btn" onclick="changeAttributeGradientColouringFromSettings('attribute-node-colouring', 'numerical-colour-list')">Run</button>
        </div>

        <div class="force" id="categorical-colour-setting">
            <p><label>Category Node Colouring</label>Modify colour of nodes based on its attribute value</p>
            <label class="attribute-selection-label" for="attribute-node-colouring">
                Choose Attribute:
                <select id="categorical-attribute-node-colouring" class="attribute-select attribute-select-border" 
                name="categorical-attribute-node-colouring" 
                onchange="changeAttributeCategoryColouringList(this.id, 'categorical-colour-list')">
                    @foreach (var key in Model.GraphModel.Mvn.VectorData.CatAttrValues.Keys)
                    {
                        <option value="@key">@key</option>
                    }
                </select>
            </label>
            <ol type="1" class="colour-list scrollbar-thin" id="categorical-colour-list"></ol>
            <button onclick="randomizeListColours('categorical-colour-list')">Randomize Colours</button>
            @* <button onclick="saveAttributeCategoryColouring('categorical-attribute-node-colouring', 'categorical-colour-list')">Save</button> *@
            <button class="run-btn" onclick="changeAttributeCategoryColouringFromSettings('categorical-attribute-node-colouring', 'categorical-colour-list')">Run</button>
        </div>
        <div class="force" id="partition-colour-setting">
            <p><label>Partition Colours</label>Modify colour of nodes based on its assigned partition</p>
            <ol type="1" class="colour-list scrollbar-thin" id="partition-colour-list"></ol>
            <button onclick="randomizeListColours('partition-colour-list')">Randomize Colours</button>
            @* <button onclick="saveAttributeCategoryColouring('categorical-attribute-node-colouring', 'categorical-colour-list')">Save</button> *@
            <button class="run-btn" onclick="setPartitionColouring('partition-colour-list')">Run</button>
        </div>

        <div class="force" id="background-colour-setting">
            <p><label>Background Colour</label>Modify the colour of network's background</p>
            <div class="colour-row-single">
                <label for="background-colour-input">Background colour</label>
                <input type="color" id="background-colour-input">
            </div>
            <button class="run-btn" onclick="changeNetworkBackgroundColour('background-colour-input')">Run</button>
        </div>

        <div class="force">
            <p><label>Size of Nodes</label> Modify node size based on its attribute value</p>
            <label class="attribute-selection-label" for="attribute-node-sizing">
                Choose Attribute:
                <select id="attribute-node-sizing" class="attribute-select attribute-select-border" name="attribute-node-sizing" onchange="setAttributeNodeSizing(this)">
                    <option value="">--None--</option>
                    <optgroup label="Attributes">
                        @foreach (var key in Model.GraphModel.Mvn.VectorData.NumAtrrExtremes.Keys)
                        {
                            <option value="@key">@key</option>
                        }
                    </optgroup>
                    <optgroup label="Centralities">
                        <option value="degree">Degree</option>
                        <option value="closeness">Closeness</option>
                    </optgroup>
                </select>
            </label>
        </div>
        @* <div class="column-content" id="visuals-profiles"> *@

    </div>
</div>